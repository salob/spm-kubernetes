{"componentChunkName":"component---src-pages-deployment-hc-deployment-mdx","path":"/deployment/hc_deployment/","result":{"pageContext":{"frontmatter":{"title":"Deploying Helm charts","description":"Deploying Helm charts"},"relativePagePath":"/deployment/hc_deployment.mdx","titleType":"page","MdxNode":{"id":"8662125a-9a22-50da-bf67-a54aeffcaa23","children":[],"parent":"576544a8-a155-55f8-9b53-fa879c7948f5","internal":{"content":"---\ntitle: Deploying Helm charts\ndescription: Deploying Helm charts\n---\n\n<InlineNotification>\n\n**Note:** As of Release 20.7.0, the Helm version used to verify this runbook is 3.2. All the Helm commands that are used in this runbook are based on Helm v3.\n\n</InlineNotification>\n\nWhen the Helm charts are uploaded to the repository, you can deploy the application by using one of the following commands:\n\n```shell\n# Helm v3 ('releasename' is mandatory for Helm v3)\nhelm install releasename local-development/spm\n```\n\n<InlineNotification>\n\n**Note**: releasename should contain no capital letters.\n\n</InlineNotification>\n\nWhere `releasename` is the name of this Helm release. For example, MyRelease-1.0.\nIf you do not specify a name, Helm auto generates one. All the names of the Kubernetes objects are created with `releasename-` as prefix.\n\nThe `helm install` command installs the Helm charts in the order in which they were loaded in the repository, with all the values defined in the files.\nHowever, as described in [Setting up the Docker® context](/build-images/setup_docker_context), you can override the configuration value by running the following shell script:\n\n```shell\n# Helm v3\nhelm install releasename local-development/spm -f override-values.yaml\n```\n\n### Sample `override-values.yaml` files\n\nHere are three sample override files for deploying.\n\n* [Minikube](/resources/minikube-values.yaml)\n* [CodeReady Containers](/resources/crc-values.yaml)\n* [IBM Cloud Kubernetes Service](/resources/iks-values.yaml)\n\n<InlineNotification>\n\n**Note on IKS overrides:**\n\n* The full image name is based on the `registry`, `imageLibrary`, `imagePrefix`, and `imageTag` keys nested under `global.images` as follows:\n  * `{registry}/{imageLibrary}/{imagePrefix}curam:{imageTag}`\n  * With the given values, the resulting image name will look like this: `us.icr.io/foo-library/test_curam:latest`\n* IAM credentials for the [IBM Container Registry](https://cloud.ibm.com/docs/containers?topic=containers-registry) (`global.imagePullSecret`) must be provided.\n* The [Application Load Balancer IDs](https://cloud.ibm.com/docs/containers?topic=containers-ingress_annotation#alb-id) (`ingress.annotations.\"ingress.bluemix.net/ALB-ID\"`) must be provided for the Ingress resource to be created correctly.\n\n</InlineNotification>\n\nThe license agreements for the IBM® WebSphere® Liberty and IBM WebSphere MQ images must be accepted in order to proceed with the deployment of these elements. This can be done by setting the `global.license` property to `accept`.\n\nThe respective license agreements can be reviewed by running the following commands:\n\n```shell\n# IBM WebSphere Liberty\ndocker run --rm -e LICENSE=view websphere-liberty:20.0.0.9-full-java8-ibmjava\n\n# IBM WebSphere MQ\ndocker run --rm -e LICENSE=view ibmcom/mq:9.1.3.0\n```\n\n## Status of the system\n\nThe `helm install` command shows all the Kubernetes objects and also runs the SPM containers. You can track the status of the SPM containers on real time by running the following command:\n\n```shell\nkubectl get pods -w\n\nNAME                                              READY  STATUS    RESTARTS  AGE\nreleasename-apps-curam-consumer-595c8bf95f-zn2l5  0/1    Init 3/4  0         5m\nreleasename-apps-curam-producer-6b5569c4ff-nvxtd  1/1    Running   0         5m\nreleasename-apps-rest-consumer-85b4865b9d-wr6hj   0/1    Init 3/4  0         5m\nreleasename-apps-rest-producer-cd8fdbbbf-j2mjj    0/1    Init 3/4  0         5m\nreleasename-uawebapp-7cdd64987-qx8l8                1/1    Running   0         5m\nreleasename-web-67697ffb8b-fdsk2                  1/1    Running   0         5m\nreleasename-mqserver-curam-7f45bcd64d-rlqns       1/1    Running   0         5m\nreleasename-mqserver-rest-544c5b4758-pnbpz        1/1    Running   0         5m\nreleasename-xmlserver-77d6d9b75d-4xr8k            1/1    Running   0         5m\n\n```\n\nThe command lists the pods and their status, where each status change is on a new line.\n\nSome of the pods have initialization steps, so they are not shown until the steps are completed.\n\nThe output of the `kubectl get pods` command provides the names of the pods that you can use to substitute for `podname` in the following example commands.\nFor example, the Liberty pod that contains SPM code is a name that uses a pattern of: `releasename-apps-curam-`.\n\nYou can also describe a pod by running the following command:\n\n```shell\nkubectl describe pod/pod name\n```\n\nYou can also read the log when the status is `running`, by running the following command:\n\n```shell\nkubectl logs -f pod/podname\n```\n\n## Accessing the application\n\nTo access the application, a URL is provided to access the pod within the cluster. This access is provided using Ingress resources on Kubernetes, and Routes resources on OpenShift.\n\nExample URLs:\n\n<Tabs>\n\n<Tab label=\"Minikube\">\n<Row>\n<Column>\n\n```shell\nhttps://minikube.local/Curam\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"CRC\">\n<Row>\n<Column>\n\n```shell\nhttps://spm-ocp.apps-crc.testing/Curam\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"IKS\">\n<Row>\n<Column>\n\n```shell\nhttps://spm.<cluster_name>-<hash>-0000.<region>.containers.appdomain.cloud/Curam\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n","type":"Mdx","contentDigest":"8460bec0f7ea2ef347fc9f26af832638","counter":144,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Deploying Helm charts","description":"Deploying Helm charts"},"exports":{},"rawBody":"---\ntitle: Deploying Helm charts\ndescription: Deploying Helm charts\n---\n\n<InlineNotification>\n\n**Note:** As of Release 20.7.0, the Helm version used to verify this runbook is 3.2. All the Helm commands that are used in this runbook are based on Helm v3.\n\n</InlineNotification>\n\nWhen the Helm charts are uploaded to the repository, you can deploy the application by using one of the following commands:\n\n```shell\n# Helm v3 ('releasename' is mandatory for Helm v3)\nhelm install releasename local-development/spm\n```\n\n<InlineNotification>\n\n**Note**: releasename should contain no capital letters.\n\n</InlineNotification>\n\nWhere `releasename` is the name of this Helm release. For example, MyRelease-1.0.\nIf you do not specify a name, Helm auto generates one. All the names of the Kubernetes objects are created with `releasename-` as prefix.\n\nThe `helm install` command installs the Helm charts in the order in which they were loaded in the repository, with all the values defined in the files.\nHowever, as described in [Setting up the Docker® context](/build-images/setup_docker_context), you can override the configuration value by running the following shell script:\n\n```shell\n# Helm v3\nhelm install releasename local-development/spm -f override-values.yaml\n```\n\n### Sample `override-values.yaml` files\n\nHere are three sample override files for deploying.\n\n* [Minikube](/resources/minikube-values.yaml)\n* [CodeReady Containers](/resources/crc-values.yaml)\n* [IBM Cloud Kubernetes Service](/resources/iks-values.yaml)\n\n<InlineNotification>\n\n**Note on IKS overrides:**\n\n* The full image name is based on the `registry`, `imageLibrary`, `imagePrefix`, and `imageTag` keys nested under `global.images` as follows:\n  * `{registry}/{imageLibrary}/{imagePrefix}curam:{imageTag}`\n  * With the given values, the resulting image name will look like this: `us.icr.io/foo-library/test_curam:latest`\n* IAM credentials for the [IBM Container Registry](https://cloud.ibm.com/docs/containers?topic=containers-registry) (`global.imagePullSecret`) must be provided.\n* The [Application Load Balancer IDs](https://cloud.ibm.com/docs/containers?topic=containers-ingress_annotation#alb-id) (`ingress.annotations.\"ingress.bluemix.net/ALB-ID\"`) must be provided for the Ingress resource to be created correctly.\n\n</InlineNotification>\n\nThe license agreements for the IBM® WebSphere® Liberty and IBM WebSphere MQ images must be accepted in order to proceed with the deployment of these elements. This can be done by setting the `global.license` property to `accept`.\n\nThe respective license agreements can be reviewed by running the following commands:\n\n```shell\n# IBM WebSphere Liberty\ndocker run --rm -e LICENSE=view websphere-liberty:20.0.0.9-full-java8-ibmjava\n\n# IBM WebSphere MQ\ndocker run --rm -e LICENSE=view ibmcom/mq:9.1.3.0\n```\n\n## Status of the system\n\nThe `helm install` command shows all the Kubernetes objects and also runs the SPM containers. You can track the status of the SPM containers on real time by running the following command:\n\n```shell\nkubectl get pods -w\n\nNAME                                              READY  STATUS    RESTARTS  AGE\nreleasename-apps-curam-consumer-595c8bf95f-zn2l5  0/1    Init 3/4  0         5m\nreleasename-apps-curam-producer-6b5569c4ff-nvxtd  1/1    Running   0         5m\nreleasename-apps-rest-consumer-85b4865b9d-wr6hj   0/1    Init 3/4  0         5m\nreleasename-apps-rest-producer-cd8fdbbbf-j2mjj    0/1    Init 3/4  0         5m\nreleasename-uawebapp-7cdd64987-qx8l8                1/1    Running   0         5m\nreleasename-web-67697ffb8b-fdsk2                  1/1    Running   0         5m\nreleasename-mqserver-curam-7f45bcd64d-rlqns       1/1    Running   0         5m\nreleasename-mqserver-rest-544c5b4758-pnbpz        1/1    Running   0         5m\nreleasename-xmlserver-77d6d9b75d-4xr8k            1/1    Running   0         5m\n\n```\n\nThe command lists the pods and their status, where each status change is on a new line.\n\nSome of the pods have initialization steps, so they are not shown until the steps are completed.\n\nThe output of the `kubectl get pods` command provides the names of the pods that you can use to substitute for `podname` in the following example commands.\nFor example, the Liberty pod that contains SPM code is a name that uses a pattern of: `releasename-apps-curam-`.\n\nYou can also describe a pod by running the following command:\n\n```shell\nkubectl describe pod/pod name\n```\n\nYou can also read the log when the status is `running`, by running the following command:\n\n```shell\nkubectl logs -f pod/podname\n```\n\n## Accessing the application\n\nTo access the application, a URL is provided to access the pod within the cluster. This access is provided using Ingress resources on Kubernetes, and Routes resources on OpenShift.\n\nExample URLs:\n\n<Tabs>\n\n<Tab label=\"Minikube\">\n<Row>\n<Column>\n\n```shell\nhttps://minikube.local/Curam\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"CRC\">\n<Row>\n<Column>\n\n```shell\nhttps://spm-ocp.apps-crc.testing/Curam\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"IKS\">\n<Row>\n<Column>\n\n```shell\nhttps://spm.<cluster_name>-<hash>-0000.<region>.containers.appdomain.cloud/Curam\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n","fileAbsolutePath":"/home/travis/build/IBM/spm-kubernetes/src/pages/deployment/hc_deployment.mdx"}}}}