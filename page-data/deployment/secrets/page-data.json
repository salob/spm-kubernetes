{"componentChunkName":"component---src-pages-deployment-secrets-mdx","path":"/deployment/secrets/","result":{"pageContext":{"frontmatter":{"title":"Handling Secrets","description":"Securely handling credentials in Helm"},"relativePagePath":"/deployment/secrets.mdx","titleType":"page","MdxNode":{"id":"9e7ff545-885b-5fd7-bde4-ff1caaf95b23","children":[],"parent":"ac546106-7a0c-5f55-aa03-b73341fe2329","internal":{"content":"---\ntitle: Handling Secrets\ndescription: Securely handling credentials in Helm\n---\n\nAll values defined in the Helm chart values.yaml file or in your custom override file become part of the Helm release definition.\n\nAs of Helm v3, the release definition is stored as a Kubernetes Secret resource by default, as opposed to a ConfigMap.\nThis provides additional security to any credentials defined as values in the release, in comparison to release definitions being stored as ConfigMaps in Helm v2.\n\n<InlineNotification>\n\nYou may find additional information about Secrets and how to define them in Kubernetes in the official documentation:\n\n* [Kubernetes Secrets](https://kubernetes.io/docs/concepts/configuration/secret/)\n* [Encrypting Secret Data at Rest](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/)\n\n</InlineNotification>\n\nBy default, the `spm` chart will generate all of the secrets it needs. However, you may want to manage them outside of a Helm release, and point to existing secrets.\nBelow is a list of the Secrets which may be provided externally, and the data they must provide.\n\nThe descriptions refer 2 variants of encryption/encoding: SPM and XOR.\n\n* [SPM encryption](https://ibm.biz/EncryptingSPMPasswords) refers to the values obtained from the `build.sh encrypt -Dpassword=<password>` command.\n* [XOR encoding](https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/rwlp_command_securityutil.html) refers to the values obtained from the `$WLP_HOME/bin/securityUtility encode <password>` command.\n\n## SPM Secrets\n\nThe secrets below are structured the following way - the top-level key is the property, which must be set in the override values file, and nested below it are the keys that must be defined for the secret along with their description.\nIf the below top-level keys are not provided, the secrets will be generated by the Helm chart, prefixed with the Helm release name.\n\n* `global.imagePullSecret.secretName` (type: kubernetes.io/dockerconfigjson)\n* `global.database.credsSecretName` (type: Opaque)\n  * `SPM_DB_USR`: Database username for datastore connections\n  * `SPM_DB_PSW`: SPM encrypted password for the datastore connections (used by Batch processes)\n  * `XOR_DB_PSW`: XOR encoded password for the datastore connections (used by WebSphere Liberty)\n* `global.mq.queueManager.secret.name` (type: Opaque)\n  * `adminPasswordKey`: Password for the `admin` user in the [IBM MQ Docker image](https://hub.docker.com/r/ibmcom/mq)\n  * `appPasswordKey`: Password for the `app` user in the [IBM MQ Docker image](https://hub.docker.com/r/ibmcom/mq)\n  * `appUsername`: Username for MQ connections\n* `apps.ltpaKeys.secretName` (type: Opaque)\n  * `ltpa.keys`: Contents of the ltpa.keys file generated using `securityUtility createLTPAKeys --password=<password> --file=ltpa.keys`\n  * `passwordKey`: XOR encoded password for the LTPA keys file\n* `apps.systemUser.credsSecretName` (type: Opaque)\n  * `SYSTEM_USER`: The user under which JMS messages are executed (default: [SYSTEM](https://www.ibm.com/support/knowledgecenter/SS8S5A_7.0.4/com.ibm.curam.content.doc/Security/c_SECHAND_Securitynonuserprocesses1JmsMessaging1.html))\n  * `SYSTEM_PASSWORD`: XOR encoded password for the above user\n* `apps.wlpAdmin.secretName` (type: Opaque)\n  * `KeystorePassword`: Password for the default WebSphere Liberty keystore\n  * `XORKeystorePassword`: XOR encoded password for the default WebSphere Liberty keystore\n  * `WebSphereUsername`: Username of the administrative user for accessing the [Liberty Admin Center](https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_ui.html), when enabled\n  * `WebSpherePassword`: Password of the Liberty administrative user\n  * `XORWebSpherePassword`: XOR encoded password of the Liberty administrative user\n","type":"Mdx","contentDigest":"b63bb08e0ba8d52dd37816002b4daa87","counter":147,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Handling Secrets","description":"Securely handling credentials in Helm"},"exports":{},"rawBody":"---\ntitle: Handling Secrets\ndescription: Securely handling credentials in Helm\n---\n\nAll values defined in the Helm chart values.yaml file or in your custom override file become part of the Helm release definition.\n\nAs of Helm v3, the release definition is stored as a Kubernetes Secret resource by default, as opposed to a ConfigMap.\nThis provides additional security to any credentials defined as values in the release, in comparison to release definitions being stored as ConfigMaps in Helm v2.\n\n<InlineNotification>\n\nYou may find additional information about Secrets and how to define them in Kubernetes in the official documentation:\n\n* [Kubernetes Secrets](https://kubernetes.io/docs/concepts/configuration/secret/)\n* [Encrypting Secret Data at Rest](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/)\n\n</InlineNotification>\n\nBy default, the `spm` chart will generate all of the secrets it needs. However, you may want to manage them outside of a Helm release, and point to existing secrets.\nBelow is a list of the Secrets which may be provided externally, and the data they must provide.\n\nThe descriptions refer 2 variants of encryption/encoding: SPM and XOR.\n\n* [SPM encryption](https://ibm.biz/EncryptingSPMPasswords) refers to the values obtained from the `build.sh encrypt -Dpassword=<password>` command.\n* [XOR encoding](https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/rwlp_command_securityutil.html) refers to the values obtained from the `$WLP_HOME/bin/securityUtility encode <password>` command.\n\n## SPM Secrets\n\nThe secrets below are structured the following way - the top-level key is the property, which must be set in the override values file, and nested below it are the keys that must be defined for the secret along with their description.\nIf the below top-level keys are not provided, the secrets will be generated by the Helm chart, prefixed with the Helm release name.\n\n* `global.imagePullSecret.secretName` (type: kubernetes.io/dockerconfigjson)\n* `global.database.credsSecretName` (type: Opaque)\n  * `SPM_DB_USR`: Database username for datastore connections\n  * `SPM_DB_PSW`: SPM encrypted password for the datastore connections (used by Batch processes)\n  * `XOR_DB_PSW`: XOR encoded password for the datastore connections (used by WebSphere Liberty)\n* `global.mq.queueManager.secret.name` (type: Opaque)\n  * `adminPasswordKey`: Password for the `admin` user in the [IBM MQ Docker image](https://hub.docker.com/r/ibmcom/mq)\n  * `appPasswordKey`: Password for the `app` user in the [IBM MQ Docker image](https://hub.docker.com/r/ibmcom/mq)\n  * `appUsername`: Username for MQ connections\n* `apps.ltpaKeys.secretName` (type: Opaque)\n  * `ltpa.keys`: Contents of the ltpa.keys file generated using `securityUtility createLTPAKeys --password=<password> --file=ltpa.keys`\n  * `passwordKey`: XOR encoded password for the LTPA keys file\n* `apps.systemUser.credsSecretName` (type: Opaque)\n  * `SYSTEM_USER`: The user under which JMS messages are executed (default: [SYSTEM](https://www.ibm.com/support/knowledgecenter/SS8S5A_7.0.4/com.ibm.curam.content.doc/Security/c_SECHAND_Securitynonuserprocesses1JmsMessaging1.html))\n  * `SYSTEM_PASSWORD`: XOR encoded password for the above user\n* `apps.wlpAdmin.secretName` (type: Opaque)\n  * `KeystorePassword`: Password for the default WebSphere Liberty keystore\n  * `XORKeystorePassword`: XOR encoded password for the default WebSphere Liberty keystore\n  * `WebSphereUsername`: Username of the administrative user for accessing the [Liberty Admin Center](https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.wlp.doc/ae/twlp_ui.html), when enabled\n  * `WebSpherePassword`: Password of the Liberty administrative user\n  * `XORWebSpherePassword`: XOR encoded password of the Liberty administrative user\n","fileAbsolutePath":"/home/travis/build/IBM/spm-kubernetes/src/pages/deployment/secrets.mdx"}}}}