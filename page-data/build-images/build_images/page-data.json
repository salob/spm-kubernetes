{"componentChunkName":"component---src-pages-build-images-build-images-mdx","path":"/build-images/build_images/","result":{"pageContext":{"frontmatter":{"title":"Building the Docker® images","description":"Building the Docker images"},"relativePagePath":"/build-images/build_images.mdx","titleType":"page","MdxNode":{"id":"87bf09a7-2d84-5418-98f3-24506346fdf2","children":[],"parent":"0c458619-40a4-5ec3-af99-9d46853686ce","internal":{"content":"---\ntitle: Building the Docker® images\ndescription: Building the Docker images\n---\n\n<InlineNotification>\nUniversal Base Image (UBI) consists of enterprise-ready and OCI-compliant Linux containers that offer greater security with stricter defaults than general images.\n\nFor more information, see Red Hat's [Universal Base Image](https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image) and [Red Hat Universal base image how it works](https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/)\n\n</InlineNotification>\n\nSome of the base images require [authentication](https://access.redhat.com/terms-based-registry) with the RedHat Container Registry.\nYou must be logged in to the following registries:\n\n* `registry.redhat.io`\n  * For accessing `registry.redhat.io/rhel8/httpd-24`\n  * Login using `docker login registry.redhat.io`\n* `registry.connect.redhat.com`\n  * For accessing `registry.connect.redhat.com/ibm/ibmjava8-sdk-ubi8-minimal`\n  * Login using `docker login registry.connect.redhat.com`\n\n<InlineNotification>\n\nIf you do not have an active RedHat subscription, or prefer to build these images from source, see the [building Base images](../base_images) page.\n\nShould you opt to build your own base images, the `BASE_REGISTRY` argument in the below commands may be omitted, if the base images are built in the same environment.\nIf the images are stored in a private registry, set `BASE_REGISTRY` to the registry's hostname.\n\n</InlineNotification>\n\nNow that all the elements are in place, build the images as follows:\n\n* We will use a `$DOCKER_REGISTRY` for the commands below. Please select based on the container environment you are deploying.\n  * CRC will be `default-route-openshift-image-registry.apps-crc.testing`\n  * Minikube will be `minikube.local:5000`\n  * IKS will be `us.icr.io`\n\n* To build the XML server image, run the following commands:\n\n<Tabs>\n\n<Tab label=\"Using RedHat Registry\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/xmlserver:latest \\\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" \\\n     --file XMLServer.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/xmlserver:latest \\\n     --file XMLServer.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n* To build the utilities image, run the following commands:\n  * This image is used at various stages of the deployment to check the state of the deployment.\n\n<Tabs>\n\n<Tab label=\"Using RedHat Registry\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/utilities:latest \\\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" \\\n     --file Utilities.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/utilities:latest \\\n     --file Utilities.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n* To build the batch image, run the following commands:\n  * A `.dockerignore` file is used to omit the EAR files from the build context for batch\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\necho -e 'content/release-stage/ear' > .dockerignore\ndocker build \\\n     --tag $DOCKER_REGISTRY/batch:latest \\\n     --file Batch.Dockerfile .\nrm -f .dockerignore\n```\n\n* To build the Server Code image, run the following commands:\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/servercode:latest \\\n     --file ServerEAR.Dockerfile \\\n     --build-arg \"MQ_RA_LICENSE=--acceptLicense\" .\n```\n\n* To build the application image, run the following commands for each of the applications (EAR files) needed:\n  * Take note of the `SERVERCODE_IMAGE` build argument which references the server code image above - this gives the images a common base\n\n<Tabs>\n\n<Tab label=\"Curam EAR\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/curam:latest \\\n     --file ClientEAR.Dockerfile \\\n     --build-arg \"SERVERCODE_IMAGE=$DOCKER_REGISTRY/servercode:latest\" \\\n     --build-arg \"EAR_NAME=Curam\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Other EARs\">\n<Row>\n<Column>\n\nFor additional SPM applications (e.g. Rest, CitizenPortal), make the following changes to the command:\n\n* the value of the `--tag` argument must be the application name in _lowercase_\n* the value of the `--build-arg EAR_NAME` argument must be the name of the EAR file _without_ the file extension (that is, for `Rest.ear`, use the value `Rest`)\n\n```shell\ndocker build \\\n     --tag $DOCKER_REGISTRY/rest:latest \\\n     --file ClientEAR.Dockerfile \\\n     --build-arg \"SERVERCODE_IMAGE=$DOCKER_REGISTRY/servercode:latest\" \\\n     --build-arg \"EAR_NAME=Rest\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n* To build the static content image, run the following commands:\n\n<Tabs>\n\n<Tab label=\"Using RedHat Registry\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/httpd:latest \\\n     --file StaticContent.Dockerfile \\\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" \\\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/httpd:latest \\\n     --file StaticContent.Dockerfile \\\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n<InlineNotification>\n\n**Note:** The `CONTENT_DIR` build argument must correspond to the value set in `curam-config.xml` when the webclient was build.\n\n</InlineNotification>\n\n* To build an SPM Docker image for your *built* Universal Access application:\n  * Copy the `build` directory from the React application to `$SPM_HOME/dockerfiles/HTTPServer`\n  * Run the following commands:\n\n<InlineNotification>\n\nThis is applicable only if you are licensed for [Universal Access](https://www.ibm.com/support/knowledgecenter/SS8S5A_7.0.10/com.ibm.curam.universalaccess.doc/CitizenEngagement/ctr_CitizenEngagementApplication.html)\n\n**Note:** The `CONTENT_DIR` build argument must correspond to the value of the `PUBLIC_URL` variable set when creating the production build of the React app (`npm run build`).\n\n</InlineNotification>\n\n<Tabs>\n\n<Tab label=\"Using RedHat Registry\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/uawebapp:latest \\\n     --file UAWebApp.Dockerfile \\\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" \\\n     --build-arg \"CONTENT_DIR=/universal\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/uawebapp:latest \\\n     --file UAWebApp.Dockerfile \\\n     --build-arg \"CONTENT_DIR=/universal\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n## Pushing the images to the registry\n\nWhen you set up Minikube by following the steps in [Minikube](/prereq/kubernetes/minikube), a registry was also created to store the Docker images.\nTo push the new images that you created to the registry, run the following shell script:\n\n```shell\ndocker push $DOCKER_REGISTRY/xmlserver:latest\ndocker push $DOCKER_REGISTRY/utilities:latest\ndocker push $DOCKER_REGISTRY/batch:latest\ndocker push $DOCKER_REGISTRY/servercode:latest\ndocker push $DOCKER_REGISTRY/curam:latest\ndocker push $DOCKER_REGISTRY/httpd:latest\n```\n\n<InlineNotification>\n\nIf any additional images were built (for other SPM applications or for the React application), do not forget to push the images too. For example:\n\n```shell\ndocker push $DOCKER_REGISTRY/rest:latest\ndocker push $DOCKER_REGISTRY/uawebapp:latest\n```\n\n</InlineNotification>\n\n## Pushing the images to the IBM Cloud Container Registry\n\nIBM Cloud Container Registry is the service to distribute the containers across Kubernetes clusters. In order to configure it, some preparation steps are\nrequired to obtain the credentials and a namespace, globally unique between all the tenants of IBM Cloud.\nRefer to [Getting started with IBM Cloud Container Registry](https://cloud.ibm.com/docs/Registry?topic=Registry-getting-started) for more information on configuring the registry and obtaining the required credentials.\n\n```shell\nibmcloud login -c <ICR_ENDPOINT> --apikey <ICR_API_KEY> -r <ICR_DC_REGION>\nibmcloud cr login\n\ndocker push us.icr.io/<ICR_NAMESPACE>/xmlserver:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/utilities:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/batch:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/curam:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/httpd:latest\n```\n\n## View the artifacts in the repository\n\nConfirm that the pushes to the Docker registry succeeded. Run the following command:\n\n```shell\ncurl http://$DOCKER_REGISTRY/v2/_catalog\n```\n\nThe command returns the following result:\n\n```json\n{\"repositories\":[\"batch\",\"curam\",\"xmlserver\",\"httpd\",\"utilities\"]}\n```\n\n<InlineNotification>\n\n**Note:** When you shut down Minikube, you might need to repush the Docker images to the registry.\n\n</InlineNotification>\n\nFor more information about the Docker Registry HTTP API, see [Docker Registry HTTP API V2](https://docs.docker.com/registry/spec/api/).\n","type":"Mdx","contentDigest":"4bbdd10aefd9e2fffe94ebfa8bf5a40b","counter":139,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Building the Docker® images","description":"Building the Docker images"},"exports":{},"rawBody":"---\ntitle: Building the Docker® images\ndescription: Building the Docker images\n---\n\n<InlineNotification>\nUniversal Base Image (UBI) consists of enterprise-ready and OCI-compliant Linux containers that offer greater security with stricter defaults than general images.\n\nFor more information, see Red Hat's [Universal Base Image](https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image) and [Red Hat Universal base image how it works](https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/)\n\n</InlineNotification>\n\nSome of the base images require [authentication](https://access.redhat.com/terms-based-registry) with the RedHat Container Registry.\nYou must be logged in to the following registries:\n\n* `registry.redhat.io`\n  * For accessing `registry.redhat.io/rhel8/httpd-24`\n  * Login using `docker login registry.redhat.io`\n* `registry.connect.redhat.com`\n  * For accessing `registry.connect.redhat.com/ibm/ibmjava8-sdk-ubi8-minimal`\n  * Login using `docker login registry.connect.redhat.com`\n\n<InlineNotification>\n\nIf you do not have an active RedHat subscription, or prefer to build these images from source, see the [building Base images](../base_images) page.\n\nShould you opt to build your own base images, the `BASE_REGISTRY` argument in the below commands may be omitted, if the base images are built in the same environment.\nIf the images are stored in a private registry, set `BASE_REGISTRY` to the registry's hostname.\n\n</InlineNotification>\n\nNow that all the elements are in place, build the images as follows:\n\n* We will use a `$DOCKER_REGISTRY` for the commands below. Please select based on the container environment you are deploying.\n  * CRC will be `default-route-openshift-image-registry.apps-crc.testing`\n  * Minikube will be `minikube.local:5000`\n  * IKS will be `us.icr.io`\n\n* To build the XML server image, run the following commands:\n\n<Tabs>\n\n<Tab label=\"Using RedHat Registry\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/xmlserver:latest \\\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" \\\n     --file XMLServer.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/xmlserver:latest \\\n     --file XMLServer.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n* To build the utilities image, run the following commands:\n  * This image is used at various stages of the deployment to check the state of the deployment.\n\n<Tabs>\n\n<Tab label=\"Using RedHat Registry\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/utilities:latest \\\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" \\\n     --file Utilities.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/utilities:latest \\\n     --file Utilities.Dockerfile .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n* To build the batch image, run the following commands:\n  * A `.dockerignore` file is used to omit the EAR files from the build context for batch\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\necho -e 'content/release-stage/ear' > .dockerignore\ndocker build \\\n     --tag $DOCKER_REGISTRY/batch:latest \\\n     --file Batch.Dockerfile .\nrm -f .dockerignore\n```\n\n* To build the Server Code image, run the following commands:\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/servercode:latest \\\n     --file ServerEAR.Dockerfile \\\n     --build-arg \"MQ_RA_LICENSE=--acceptLicense\" .\n```\n\n* To build the application image, run the following commands for each of the applications (EAR files) needed:\n  * Take note of the `SERVERCODE_IMAGE` build argument which references the server code image above - this gives the images a common base\n\n<Tabs>\n\n<Tab label=\"Curam EAR\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\n     --tag $DOCKER_REGISTRY/curam:latest \\\n     --file ClientEAR.Dockerfile \\\n     --build-arg \"SERVERCODE_IMAGE=$DOCKER_REGISTRY/servercode:latest\" \\\n     --build-arg \"EAR_NAME=Curam\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Other EARs\">\n<Row>\n<Column>\n\nFor additional SPM applications (e.g. Rest, CitizenPortal), make the following changes to the command:\n\n* the value of the `--tag` argument must be the application name in _lowercase_\n* the value of the `--build-arg EAR_NAME` argument must be the name of the EAR file _without_ the file extension (that is, for `Rest.ear`, use the value `Rest`)\n\n```shell\ndocker build \\\n     --tag $DOCKER_REGISTRY/rest:latest \\\n     --file ClientEAR.Dockerfile \\\n     --build-arg \"SERVERCODE_IMAGE=$DOCKER_REGISTRY/servercode:latest\" \\\n     --build-arg \"EAR_NAME=Rest\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n* To build the static content image, run the following commands:\n\n<Tabs>\n\n<Tab label=\"Using RedHat Registry\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/httpd:latest \\\n     --file StaticContent.Dockerfile \\\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" \\\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/httpd:latest \\\n     --file StaticContent.Dockerfile \\\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n<InlineNotification>\n\n**Note:** The `CONTENT_DIR` build argument must correspond to the value set in `curam-config.xml` when the webclient was build.\n\n</InlineNotification>\n\n* To build an SPM Docker image for your *built* Universal Access application:\n  * Copy the `build` directory from the React application to `$SPM_HOME/dockerfiles/HTTPServer`\n  * Run the following commands:\n\n<InlineNotification>\n\nThis is applicable only if you are licensed for [Universal Access](https://www.ibm.com/support/knowledgecenter/SS8S5A_7.0.10/com.ibm.curam.universalaccess.doc/CitizenEngagement/ctr_CitizenEngagementApplication.html)\n\n**Note:** The `CONTENT_DIR` build argument must correspond to the value of the `PUBLIC_URL` variable set when creating the production build of the React app (`npm run build`).\n\n</InlineNotification>\n\n<Tabs>\n\n<Tab label=\"Using RedHat Registry\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/uawebapp:latest \\\n     --file UAWebApp.Dockerfile \\\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" \\\n     --build-arg \"CONTENT_DIR=/universal\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n<Tab label=\"Unauthenticated / Local image\">\n<Row>\n<Column>\n\n```shell\ncd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\n     --tag $DOCKER_REGISTRY/uawebapp:latest \\\n     --file UAWebApp.Dockerfile \\\n     --build-arg \"CONTENT_DIR=/universal\" .\n```\n\n</Column>\n</Row>\n</Tab>\n\n</Tabs>\n\n## Pushing the images to the registry\n\nWhen you set up Minikube by following the steps in [Minikube](/prereq/kubernetes/minikube), a registry was also created to store the Docker images.\nTo push the new images that you created to the registry, run the following shell script:\n\n```shell\ndocker push $DOCKER_REGISTRY/xmlserver:latest\ndocker push $DOCKER_REGISTRY/utilities:latest\ndocker push $DOCKER_REGISTRY/batch:latest\ndocker push $DOCKER_REGISTRY/servercode:latest\ndocker push $DOCKER_REGISTRY/curam:latest\ndocker push $DOCKER_REGISTRY/httpd:latest\n```\n\n<InlineNotification>\n\nIf any additional images were built (for other SPM applications or for the React application), do not forget to push the images too. For example:\n\n```shell\ndocker push $DOCKER_REGISTRY/rest:latest\ndocker push $DOCKER_REGISTRY/uawebapp:latest\n```\n\n</InlineNotification>\n\n## Pushing the images to the IBM Cloud Container Registry\n\nIBM Cloud Container Registry is the service to distribute the containers across Kubernetes clusters. In order to configure it, some preparation steps are\nrequired to obtain the credentials and a namespace, globally unique between all the tenants of IBM Cloud.\nRefer to [Getting started with IBM Cloud Container Registry](https://cloud.ibm.com/docs/Registry?topic=Registry-getting-started) for more information on configuring the registry and obtaining the required credentials.\n\n```shell\nibmcloud login -c <ICR_ENDPOINT> --apikey <ICR_API_KEY> -r <ICR_DC_REGION>\nibmcloud cr login\n\ndocker push us.icr.io/<ICR_NAMESPACE>/xmlserver:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/utilities:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/batch:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/curam:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/httpd:latest\n```\n\n## View the artifacts in the repository\n\nConfirm that the pushes to the Docker registry succeeded. Run the following command:\n\n```shell\ncurl http://$DOCKER_REGISTRY/v2/_catalog\n```\n\nThe command returns the following result:\n\n```json\n{\"repositories\":[\"batch\",\"curam\",\"xmlserver\",\"httpd\",\"utilities\"]}\n```\n\n<InlineNotification>\n\n**Note:** When you shut down Minikube, you might need to repush the Docker images to the registry.\n\n</InlineNotification>\n\nFor more information about the Docker Registry HTTP API, see [Docker Registry HTTP API V2](https://docs.docker.com/registry/spec/api/).\n","fileAbsolutePath":"/home/travis/build/IBM/spm-kubernetes/src/pages/build-images/build_images.mdx"}}}}