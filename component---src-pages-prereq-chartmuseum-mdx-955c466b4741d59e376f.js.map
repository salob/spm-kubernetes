{"version":3,"sources":["webpack:///./src/pages/prereq/chartmuseum.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","Tabs","Tab","Row","Column","InlineNotification","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","label","isMDXComponent"],"mappings":"0PAMaA,G,UAAe,IAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAGZG,EAAOL,EAAc,QACrBM,EAAMN,EAAc,OACpBO,EAAMP,EAAc,OACpBQ,EAASR,EAAc,UACvBS,EAAqBT,EAAc,sBACnCU,EAAc,CAClBX,gBAEIY,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGZ,EACF,8BACD,OAAO,YAACS,EAAD,eAAeD,EAAiBR,EAAhC,CAAuCY,WAAYA,EAAYC,QAAQ,cAG5E,4KAA2J,6BAAGC,WAAW,KAAQ,CAC7K,KAAQ,6BAD+I,eAA3J,6BAGA,yMACA,yIAAwH,6BAAGA,WAAW,KAAQ,CAC1I,KAAQ,gCAD4G,wBAAxH,KAGA,uEACA,+EAA8D,0BAAYA,WAAW,KAAvB,cAA9D,kDACA,kDACA,sBACE,kBAAIA,WAAW,MAAf,sEAEF,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,2LASL,sBACE,kBAAIA,WAAW,MAAf,WAAgC,0BAAYA,WAAW,MAAvB,eAAhC,4CAEF,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,8BAIL,0DACA,wEAAuD,0BAAYA,WAAW,KAAvB,aAAvD,iCACA,YAACX,EAAD,CAAMU,QAAQ,QACZ,YAACT,EAAD,CAAKW,MAAM,YAAYF,QAAQ,OAC7B,YAACR,EAAD,CAAKQ,QAAQ,OACX,YAACP,EAAD,CAAQO,QAAQ,UACd,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,mBADZ,+CAOX,YAACV,EAAD,CAAKW,MAAM,UAAUF,QAAQ,OAC3B,YAACR,EAAD,CAAKQ,QAAQ,OACX,YAACP,EAAD,CAAQO,QAAQ,UACd,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,uIAUb,YAACP,EAAD,CAAoBM,QAAQ,sBAC1B,qBAAG,sBAAQC,WAAW,KAAnB,SAAH,yDAAsG,0BAAYA,WAAW,KAAvB,kBAAtG,4CAEF,2EACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,qFAOL,6CACA,iFAAgE,0BAAYA,WAAW,KAAvB,OAAhE,qDAAqK,6BAAGA,WAAW,KAAQ,CACvL,KAAQ,6CADyJ,aAArK,mCAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,mEAIL,YAACP,EAAD,CAAoBM,QAAQ,sBAC1B,qBAAG,sBAAQC,WAAW,KAAnB,SAAH,gFAEF,kGAAiF,0BAAYA,WAAW,KAAvB,gBAAjF,uCAAiL,6BAAGA,WAAW,KAAQ,CACnM,KAAQ,8CADqK,yBAAjL,KAGA,uEACA,+HACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,6DAIL,0FACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,qBAIL,oEAAmD,0BAAYA,WAAW,KAAvB,qBAAnD,+CAAgK,0BAAYA,WAAW,KAAvB,iBAAhK,aACA,2GACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,wBAQTH,EAAWK,gBAAiB","file":"component---src-pages-prereq-chartmuseum-mdx-955c466b4741d59e376f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/IBM/spm-kubernetes/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Tabs = makeShortcode(\"Tabs\");\nconst Tab = makeShortcode(\"Tab\");\nconst Row = makeShortcode(\"Row\");\nconst Column = makeShortcode(\"Column\");\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Helm charts are stored in a repository. For development purposes, you can use a local repository to use Helm along with Minikube. This runbook uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://chartmuseum.com/\"\n      }}>{`ChartMuseum`}</a>{` as the local repository.`}</p>\n    <p>{`A Helm chart is a collection of files that describe a related set of Kubernetes resources. Helm charts are the recommended way to distribute deployments on Kubernetes clusters.`}</p>\n    <p>{`Use ChartMuseum to develop, test, and deploy locally before you distribute the charts. For more information, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://helm.sh/docs/intro/\"\n      }}>{`Introduction to Helm`}</a>{`.`}</p>\n    <h2>{`Installing ChartMuseum in a Docker® container`}</h2>\n    <p>{`ChartMuseum can run in a Docker container by using the `}<inlineCode parentName=\"p\">{`docker run`}</inlineCode>{` command when the docker container is created.`}</p>\n    <p>{`Take the following steps:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Start a Docker container that is accessible locally on port 8080:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`docker run --rm -d --name chartmuseum \\\\\n  -p 8080:8080 \\\\\n  -e DEBUG=true \\\\\n  -e STORAGE=local \\\\\n  -e STORAGE_LOCAL_ROOTDIR=/tmp/charts \\\\\n  chartmuseum/chartmuseum:v0.12.0\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Run the `}<inlineCode parentName=\"li\">{`docker logs`}</inlineCode>{` command to view the Chart Museum logs:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`docker logs chartmuseum\n`}</code></pre>\n    <h3>{`Testing ChartMuseum connectivity`}</h3>\n    <p>{`Run the following command to test connectivity. `}<inlineCode parentName=\"p\">{`127.0.0.1`}</inlineCode>{` is the localhost IP address.`}</p>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Mac/Linux\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`curl http://127.0.0.1:8080/index.yaml\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Windows\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-powershell\"\n              }}>{`Invoke-RestMethod http://$(minikube ip):8080/index.yaml\n# OR\nInvoke-RestMethod http://$(docker-machine ip):8080/index.yaml\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` On Windows, the Docker Engine can run in a dedicated `}<inlineCode parentName=\"p\">{`docker-machine`}</inlineCode>{`, or can be reused from the Minikube VM`}</p>\n    </InlineNotification>\n    <p>{`You will see something like the following example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-yaml\"\n      }}>{`apiVersion: v1\nentries: {}\ngenerated: \"2019-06-17T10:55:37Z\"\nserverInfo: {}\n`}</code></pre>\n    <h2>{`Provisioning charts`}</h2>\n    <p>{`When ChartMuseum is running, you can copy the compressed `}<inlineCode parentName=\"p\">{`tgz`}</inlineCode>{` files that are produced by Helm, or by using the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/chartmuseum/helm-push\"\n      }}>{`Helm Push`}</a>{` plugin (recommended approach).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`helm plugin install https://github.com/chartmuseum/helm-push\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` On Windows, the Helm Push plugin must be installed from a Git Bash window.`}</p>\n    </InlineNotification>\n    <p>{`Creating the chart files is covered later in the runbook when you run the `}<inlineCode parentName=\"p\">{`helm package`}</inlineCode>{` command. For more information, see `}<a parentName=\"p\" {...{\n        \"href\": \"/spm-kubernetes/deployment/hc_preparation\"\n      }}>{`Preparing Helm Charts`}</a>{`.`}</p>\n    <h2>{`Configure Helm to access the local repository`}</h2>\n    <p>{`To use ChartMuseum as a repository, you must configure Helm to point to it. Run the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`helm repo add local-development http://127.0.0.1:8080/\n`}</code></pre>\n    <p>{`Verify the list of repositories by running the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`helm repo list\n`}</code></pre>\n    <p>{`The helm repo list command also returns the `}<inlineCode parentName=\"p\">{`local-development`}</inlineCode>{` repository that you added when you ran the `}<inlineCode parentName=\"p\">{`helm repo add`}</inlineCode>{` command.`}</p>\n    <p>{`When the repository is added, run the following command to refresh the Helm index:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`helm repo update\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}