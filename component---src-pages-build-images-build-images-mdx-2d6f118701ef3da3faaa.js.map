{"version":3,"sources":["webpack:///./src/pages/build-images/build_images.mdx"],"names":["_frontmatter","makeShortcode","name","props","console","warn","InlineNotification","Tabs","Tab","Row","Column","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","label","isMDXComponent"],"mappings":"wPAMaA,G,UAAe,IAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,2EAC5B,kBAASC,KAGZG,EAAqBL,EAAc,sBACnCM,EAAON,EAAc,QACrBO,EAAMP,EAAc,OACpBQ,EAAMR,EAAc,OACpBS,EAAST,EAAc,UACvBU,EAAc,CAClBX,gBAEIY,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGZ,EACF,8BACD,OAAO,YAACS,EAAD,eAAeD,EAAiBR,EAAhC,CAAuCY,WAAYA,EAAYC,QAAQ,cAG5E,YAACV,EAAD,CAAoBU,QAAQ,sBAA5B,qKAEE,4DAA2C,6BAAGC,WAAW,KAAQ,CAC7D,KAAQ,4EAD+B,wBAA3C,QAE0C,6BAAGA,WAAW,KAAQ,CAC5D,KAAQ,kHAD8B,+CAI5C,wDAAuC,6BAAGA,WAAW,KAAQ,CACzD,KAAQ,mDAD2B,kBAAvC,4FAIA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,sBAA+D,kBAAIA,WAAW,MAC9F,kBAAIA,WAAW,MAAf,iBAAsC,0BAAYA,WAAW,MAAvB,sCACtC,kBAAIA,WAAW,MAAf,eAAoC,0BAAYA,WAAW,MAAvB,sCAExC,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,+BAAwE,kBAAIA,WAAW,MACvG,kBAAIA,WAAW,MAAf,iBAAsC,0BAAYA,WAAW,MAAvB,8DACtC,kBAAIA,WAAW,MAAf,eAAoC,0BAAYA,WAAW,MAAvB,gDAG1C,YAACX,EAAD,CAAoBU,QAAQ,sBAC1B,+HAA8G,6BAAGC,WAAW,KAAQ,CAChI,KAAQ,mBADkG,wBAA9G,UAGA,0EAAyD,0BAAYA,WAAW,KAAvB,iBAAzD,8JACgD,0BAAYA,WAAW,KAAvB,iBADhD,iCAGF,6FACA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,iBAAqC,0BAAYA,WAAW,KAAvB,oBAArC,gGACA,kBAAIA,WAAW,MACb,kBAAIA,WAAW,MAAf,eAAoC,0BAAYA,WAAW,MAAvB,4DACpC,kBAAIA,WAAW,MAAf,oBAAyC,0BAAYA,WAAW,MAAvB,wBACzC,kBAAIA,WAAW,MAAf,eAAoC,0BAAYA,WAAW,MAAvB,gBAGxC,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,gEAGJ,YAACV,EAAD,CAAMS,QAAQ,QACZ,YAACR,EAAD,CAAKU,MAAM,wBAAwBF,QAAQ,OACzC,YAACP,EAAD,CAAKO,QAAQ,OACX,YAACN,EAAD,CAAQM,QAAQ,UACd,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,mBADZ,mNAWX,YAACT,EAAD,CAAKU,MAAM,gCAAgCF,QAAQ,OACjD,YAACP,EAAD,CAAKO,QAAQ,OACX,YAACN,EAAD,CAAQM,QAAQ,UACd,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,mBADZ,kJAWb,sBACE,kBAAIA,WAAW,MAAf,4DAAiF,kBAAIA,WAAW,MAC5F,kBAAIA,WAAW,MAAf,mGAGN,YAACV,EAAD,CAAMS,QAAQ,QACZ,YAACR,EAAD,CAAKU,MAAM,wBAAwBF,QAAQ,OACzC,YAACP,EAAD,CAAKO,QAAQ,OACX,YAACN,EAAD,CAAQM,QAAQ,UACd,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,mBADZ,mNAWX,YAACT,EAAD,CAAKU,MAAM,gCAAgCF,QAAQ,OACjD,YAACP,EAAD,CAAKO,QAAQ,OACX,YAACN,EAAD,CAAQM,QAAQ,UACd,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,mBADZ,kJAWb,sBACE,kBAAIA,WAAW,MAAf,wDAA6E,kBAAIA,WAAW,MACxF,kBAAIA,WAAW,MAAf,KAA0B,0BAAYA,WAAW,MAAvB,iBAA1B,2EAGN,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,gNASL,sBACE,kBAAIA,WAAW,MAAf,gEAEF,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,oMAQL,sBACE,kBAAIA,WAAW,MAAf,8GAAmI,kBAAIA,WAAW,MAC9I,kBAAIA,WAAW,MAAf,oBAAyC,0BAAYA,WAAW,MAAvB,oBAAzC,yGAGN,YAACV,EAAD,CAAMS,QAAQ,QACZ,YAACR,EAAD,CAAKU,MAAM,YAAYF,QAAQ,OAC7B,YAACP,EAAD,CAAKO,QAAQ,OACX,YAACN,EAAD,CAAQM,QAAQ,UACd,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,mBADZ,8PAYX,YAACT,EAAD,CAAKU,MAAM,aAAaF,QAAQ,OAC9B,YAACP,EAAD,CAAKO,QAAQ,OACX,YAACN,EAAD,CAAQM,QAAQ,UACd,+HACA,sBACE,kBAAIC,WAAW,MAAf,oBAAyC,0BAAYA,WAAW,MAAvB,SAAzC,6CAAyI,kBAAIA,WAAW,MAAf,cACzI,kBAAIA,WAAW,MAAf,oBAAyC,0BAAYA,WAAW,MAAvB,wBAAzC,8CAAyJ,kBAAIA,WAAW,MAAf,WAAzJ,qCAAmO,0BAAYA,WAAW,MAAvB,YAAnO,mBAA4S,0BAAYA,WAAW,MAAvB,QAA5S,MAEF,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,0NAYb,sBACE,kBAAIA,WAAW,MAAf,mEAEF,YAACV,EAAD,CAAMS,QAAQ,QACZ,YAACR,EAAD,CAAKU,MAAM,wBAAwBF,QAAQ,OACzC,YAACP,EAAD,CAAKO,QAAQ,OACX,YAACN,EAAD,CAAQM,QAAQ,UACd,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,mBADZ,6PAYX,YAACT,EAAD,CAAKU,MAAM,gCAAgCF,QAAQ,OACjD,YAACP,EAAD,CAAKO,QAAQ,OACX,YAACN,EAAD,CAAQM,QAAQ,UACd,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,mBADZ,qMAYb,YAACX,EAAD,CAAoBU,QAAQ,sBAC1B,qBAAG,sBAAQC,WAAW,KAAnB,SAAH,QAAqD,0BAAYA,WAAW,KAAvB,eAArD,uDAAoK,0BAAYA,WAAW,KAAvB,oBAApK,mCAEF,sBACE,kBAAIA,WAAW,MAAf,yCAA8D,kBAAIA,WAAW,MAAf,SAA9D,iCAAkI,kBAAIA,WAAW,MAC7I,kBAAIA,WAAW,MAAf,YAAiC,0BAAYA,WAAW,MAAvB,SAAjC,4CAAgI,0BAAYA,WAAW,MAAvB,qCAChI,kBAAIA,WAAW,MAAf,kCAGN,YAACX,EAAD,CAAoBU,QAAQ,sBAC1B,wEAAuD,6BAAGC,WAAW,KAAQ,CACzE,KAAQ,wJAD2C,qBAGvD,qBAAG,sBAAQA,WAAW,KAAnB,SAAH,QAAqD,0BAAYA,WAAW,KAAvB,eAArD,uDAAoK,0BAAYA,WAAW,KAAvB,cAApK,sEAAiS,0BAAYA,WAAW,KAAvB,iBAAjS,OAEF,YAACV,EAAD,CAAMS,QAAQ,QACZ,YAACR,EAAD,CAAKU,MAAM,wBAAwBF,QAAQ,OACzC,YAACP,EAAD,CAAKO,QAAQ,OACX,YAACN,EAAD,CAAQM,QAAQ,UACd,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,mBADZ,yPAYX,YAACT,EAAD,CAAKU,MAAM,gCAAgCF,QAAQ,OACjD,YAACP,EAAD,CAAKO,QAAQ,OACX,YAACN,EAAD,CAAQM,QAAQ,UACd,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,mBADZ,iMAYb,4DACA,2EAA0D,6BAAGA,WAAW,KAAQ,CAC5E,KAAQ,+CAD8C,YAA1D,uJAIA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,oRASL,YAACX,EAAD,CAAoBU,QAAQ,sBAC1B,0KACA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,mBADZ,8FAMP,gFACA,uSAEO,6BAAGA,WAAW,KAAQ,CACzB,KAAQ,uEADL,qDAFP,6FAKA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,kXAWL,8DACA,6GACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,+CAIL,kEACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,yEAIL,YAACX,EAAD,CAAoBU,QAAQ,sBAC1B,qBAAG,sBAAQC,WAAW,KAAnB,SAAH,8FAEF,qFAAoE,6BAAGA,WAAW,KAAQ,CACtF,KAAQ,+CADwD,+BAApE,MAOJH,EAAWK,gBAAiB","file":"component---src-pages-build-images-build-images-mdx-2d6f118701ef3da3faaa.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/IBM/spm-kubernetes/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst Tabs = makeShortcode(\"Tabs\");\nconst Tab = makeShortcode(\"Tab\");\nconst Row = makeShortcode(\"Row\");\nconst Column = makeShortcode(\"Column\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <InlineNotification mdxType=\"InlineNotification\">\nUniversal Base Image (UBI) consists of enterprise-ready and OCI-compliant Linux containers that offer greater security with stricter defaults than general images.\n      <p>{`For more information, see Red Hat’s `}<a parentName=\"p\" {...{\n          \"href\": \"https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image\"\n        }}>{`Universal Base Image`}</a>{` and `}<a parentName=\"p\" {...{\n          \"href\": \"https://developers.redhat.com/blog/2019/07/29/red-hat-universal-base-image-how-it-works-in-3-minutes-or-less/\"\n        }}>{`Red Hat Universal base image how it works`}</a></p>\n    </InlineNotification>\n    <p>{`Some of the base images require `}<a parentName=\"p\" {...{\n        \"href\": \"https://access.redhat.com/terms-based-registry\"\n      }}>{`authentication`}</a>{` with the RedHat Container Registry.\nYou must be logged in to the following registries:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`registry.redhat.io`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`For accessing `}<inlineCode parentName=\"li\">{`registry.redhat.io/rhel8/httpd-24`}</inlineCode></li>\n          <li parentName=\"ul\">{`Login using `}<inlineCode parentName=\"li\">{`docker login registry.redhat.io`}</inlineCode></li>\n        </ul></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`registry.connect.redhat.com`}</inlineCode><ul parentName=\"li\">\n          <li parentName=\"ul\">{`For accessing `}<inlineCode parentName=\"li\">{`registry.connect.redhat.com/ibm/ibmjava8-sdk-ubi8-minimal`}</inlineCode></li>\n          <li parentName=\"ul\">{`Login using `}<inlineCode parentName=\"li\">{`docker login registry.connect.redhat.com`}</inlineCode></li>\n        </ul></li>\n    </ul>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`If you do not have an active RedHat subscription, or prefer to build these images from source, see the `}<a parentName=\"p\" {...{\n          \"href\": \"../base_images\"\n        }}>{`building Base images`}</a>{` page.`}</p>\n      <p>{`Should you opt to build your own base images, the `}<inlineCode parentName=\"p\">{`BASE_REGISTRY`}</inlineCode>{` argument in the below commands may be omitted, if the base images are built in the same environment.\nIf the images are stored in a private registry, set `}<inlineCode parentName=\"p\">{`BASE_REGISTRY`}</inlineCode>{` to the registry’s hostname.`}</p>\n    </InlineNotification>\n    <p>{`Now that all the elements are in place, build the images as follows:`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`We will use a `}<inlineCode parentName=\"p\">{`$DOCKER_REGISTRY`}</inlineCode>{` for the commands below. Please select based on the container environment you are deploying.`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`CRC will be `}<inlineCode parentName=\"li\">{`default-route-openshift-image-registry.apps-crc.testing`}</inlineCode></li>\n          <li parentName=\"ul\">{`Minikube will be `}<inlineCode parentName=\"li\">{`minikube.local:5000`}</inlineCode></li>\n          <li parentName=\"ul\">{`IKS will be `}<inlineCode parentName=\"li\">{`us.icr.io`}</inlineCode></li>\n        </ul>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`To build the XML server image, run the following commands:`}</p>\n      </li>\n    </ul>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Using RedHat Registry\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/xmlserver:latest \\\\\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" \\\\\n     --file XMLServer.Dockerfile .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Unauthenticated / Local image\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/xmlserver:latest \\\\\n     --file XMLServer.Dockerfile .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <ul>\n      <li parentName=\"ul\">{`To build the utilities image, run the following commands:`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`This image is used at various stages of the deployment to check the state of the deployment.`}</li>\n        </ul></li>\n    </ul>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Using RedHat Registry\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/utilities:latest \\\\\n     --build-arg \"BASE_REGISTRY=registry.connect.redhat.com/\" \\\\\n     --file Utilities.Dockerfile .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Unauthenticated / Local image\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/utilities:latest \\\\\n     --file Utilities.Dockerfile .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <ul>\n      <li parentName=\"ul\">{`To build the batch image, run the following commands:`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`A `}<inlineCode parentName=\"li\">{`.dockerignore`}</inlineCode>{` file is used to omit the EAR files from the build context for batch`}</li>\n        </ul></li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`cd $SPM_HOME/dockerfiles/Liberty/\necho -e 'content/release-stage/ear' > .dockerignore\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/batch:latest \\\\\n     --file Batch.Dockerfile .\nrm -f .dockerignore\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`To build the Server Code image, run the following commands:`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/servercode:latest \\\\\n     --file ServerEAR.Dockerfile \\\\\n     --build-arg \"MQ_RA_LICENSE=--acceptLicense\" .\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`To build the application image, run the following commands for each of the applications (EAR files) needed:`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Take note of the `}<inlineCode parentName=\"li\">{`SERVERCODE_IMAGE`}</inlineCode>{` build argument which references the server code image above - this gives the images a common base`}</li>\n        </ul></li>\n    </ul>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Curam EAR\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/Liberty/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/curam:latest \\\\\n     --file ClientEAR.Dockerfile \\\\\n     --build-arg \"SERVERCODE_IMAGE=$DOCKER_REGISTRY/servercode:latest\" \\\\\n     --build-arg \"EAR_NAME=Curam\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Other EARs\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <p>{`For additional SPM applications (e.g. Rest, CitizenPortal), make the following changes to the command:`}</p>\n            <ul>\n              <li parentName=\"ul\">{`the value of the `}<inlineCode parentName=\"li\">{`--tag`}</inlineCode>{` argument must be the application name in `}<em parentName=\"li\">{`lowercase`}</em></li>\n              <li parentName=\"ul\">{`the value of the `}<inlineCode parentName=\"li\">{`--build-arg EAR_NAME`}</inlineCode>{` argument must be the name of the EAR file `}<em parentName=\"li\">{`without`}</em>{` the file extension (that is, for `}<inlineCode parentName=\"li\">{`Rest.ear`}</inlineCode>{`, use the value `}<inlineCode parentName=\"li\">{`Rest`}</inlineCode>{`)`}</li>\n            </ul>\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`docker build \\\\\n     --tag $DOCKER_REGISTRY/rest:latest \\\\\n     --file ClientEAR.Dockerfile \\\\\n     --build-arg \"SERVERCODE_IMAGE=$DOCKER_REGISTRY/servercode:latest\" \\\\\n     --build-arg \"EAR_NAME=Rest\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <ul>\n      <li parentName=\"ul\">{`To build the static content image, run the following commands:`}</li>\n    </ul>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Using RedHat Registry\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/httpd:latest \\\\\n     --file StaticContent.Dockerfile \\\\\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" \\\\\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Unauthenticated / Local image\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/httpd:latest \\\\\n     --file StaticContent.Dockerfile \\\\\n     --build-arg \"CONTENT_DIR=/CuramStatic\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` The `}<inlineCode parentName=\"p\">{`CONTENT_DIR`}</inlineCode>{` build argument must correspond to the value set in `}<inlineCode parentName=\"p\">{`curam-config.xml`}</inlineCode>{` when the webclient was build.`}</p>\n    </InlineNotification>\n    <ul>\n      <li parentName=\"ul\">{`To build an SPM Docker image for your `}<em parentName=\"li\">{`built`}</em>{` Universal Access application:`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`Copy the `}<inlineCode parentName=\"li\">{`build`}</inlineCode>{` directory from the React application to `}<inlineCode parentName=\"li\">{`$SPM_HOME/dockerfiles/HTTPServer`}</inlineCode></li>\n          <li parentName=\"ul\">{`Run the following commands:`}</li>\n        </ul></li>\n    </ul>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`This is applicable only if you are licensed for `}<a parentName=\"p\" {...{\n          \"href\": \"https://www.ibm.com/support/knowledgecenter/SS8S5A_7.0.10/com.ibm.curam.universalaccess.doc/CitizenEngagement/ctr_CitizenEngagementApplication.html\"\n        }}>{`Universal Access`}</a></p>\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` The `}<inlineCode parentName=\"p\">{`CONTENT_DIR`}</inlineCode>{` build argument must correspond to the value of the `}<inlineCode parentName=\"p\">{`PUBLIC_URL`}</inlineCode>{` variable set when creating the production build of the React app (`}<inlineCode parentName=\"p\">{`npm run build`}</inlineCode>{`).`}</p>\n    </InlineNotification>\n    <Tabs mdxType=\"Tabs\">\n      <Tab label=\"Using RedHat Registry\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/uawebapp:latest \\\\\n     --file UAWebApp.Dockerfile \\\\\n     --build-arg \"BASE_REGISTRY=registry.redhat.io/\" \\\\\n     --build-arg \"CONTENT_DIR=/universal\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n      <Tab label=\"Unauthenticated / Local image\" mdxType=\"Tab\">\n        <Row mdxType=\"Row\">\n          <Column mdxType=\"Column\">\n            <pre><code parentName=\"pre\" {...{\n                \"className\": \"language-shell\"\n              }}>{`cd $SPM_HOME/dockerfiles/HTTPServer/\ndocker build \\\\\n     --tag $DOCKER_REGISTRY/uawebapp:latest \\\\\n     --file UAWebApp.Dockerfile \\\\\n     --build-arg \"CONTENT_DIR=/universal\" .\n`}</code></pre>\n          </Column>\n        </Row>\n      </Tab>\n    </Tabs>\n    <h2>{`Pushing the images to the registry`}</h2>\n    <p>{`When you set up Minikube by following the steps in `}<a parentName=\"p\" {...{\n        \"href\": \"/spm-kubernetes/prereq/kubernetes/minikube\"\n      }}>{`Minikube`}</a>{`, a registry was also created to store the Docker images.\nTo push the new images that you created to the registry, run the following shell script:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`docker push $DOCKER_REGISTRY/xmlserver:latest\ndocker push $DOCKER_REGISTRY/utilities:latest\ndocker push $DOCKER_REGISTRY/batch:latest\ndocker push $DOCKER_REGISTRY/servercode:latest\ndocker push $DOCKER_REGISTRY/curam:latest\ndocker push $DOCKER_REGISTRY/httpd:latest\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`If any additional images were built (for other SPM applications or for the React application), do not forget to push the images too. For example:`}</p>\n      <pre><code parentName=\"pre\" {...{\n          \"className\": \"language-shell\"\n        }}>{`docker push $DOCKER_REGISTRY/rest:latest\ndocker push $DOCKER_REGISTRY/uawebapp:latest\n`}</code></pre>\n    </InlineNotification>\n    <h2>{`Pushing the images to the IBM Cloud Container Registry`}</h2>\n    <p>{`IBM Cloud Container Registry is the service to distribute the containers across Kubernetes clusters. In order to configure it, some preparation steps are\nrequired to obtain the credentials and a namespace, globally unique between all the tenants of IBM Cloud.\nRefer to `}<a parentName=\"p\" {...{\n        \"href\": \"https://cloud.ibm.com/docs/Registry?topic=Registry-getting-started\"\n      }}>{`Getting started with IBM Cloud Container Registry`}</a>{` for more information on configuring the registry and obtaining the required credentials.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`ibmcloud login -c <ICR_ENDPOINT> --apikey <ICR_API_KEY> -r <ICR_DC_REGION>\nibmcloud cr login\n\ndocker push us.icr.io/<ICR_NAMESPACE>/xmlserver:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/utilities:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/batch:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/curam:latest\ndocker push us.icr.io/<ICR_NAMESPACE>/httpd:latest\n`}</code></pre>\n    <h2>{`View the artifacts in the repository`}</h2>\n    <p>{`Confirm that the pushes to the Docker registry succeeded. Run the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`curl http://$DOCKER_REGISTRY/v2/_catalog\n`}</code></pre>\n    <p>{`The command returns the following result:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\"repositories\":[\"batch\",\"curam\",\"xmlserver\",\"httpd\",\"utilities\"]}\n`}</code></pre>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` When you shut down Minikube, you might need to repush the Docker images to the registry.`}</p>\n    </InlineNotification>\n    <p>{`For more information about the Docker Registry HTTP API, see `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.docker.com/registry/spec/api/\"\n      }}>{`Docker Registry HTTP API V2`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}