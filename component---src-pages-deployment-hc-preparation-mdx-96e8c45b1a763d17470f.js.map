{"version":3,"sources":["webpack:///./src/pages/deployment/hc_preparation.mdx"],"names":["name","_frontmatter","InlineNotification","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent"],"mappings":"4LAQsBA,E,4DAFTC,G,UAAe,IAOtBC,GALgBF,EAKmB,qBALX,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,2EAC5B,kBAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGP,EACF,8BACD,OAAO,YAACI,EAAD,eAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,cAG5E,YAACT,EAAD,CAAoBS,QAAQ,sBAC1B,qBAAG,sBAAQC,WAAW,KAAnB,SAAH,0JAEF,4BAAW,6BAAGA,WAAW,KAAQ,CAC7B,KAAQ,0CADD,kBAAX,0CAGA,sBACE,kBAAIA,WAAW,MAAK,kBAAIA,WAAW,MAAf,SAApB,uFACA,kBAAIA,WAAW,MAAK,kBAAIA,WAAW,MAAf,UAApB,2CACA,kBAAIA,WAAW,MAAK,kBAAIA,WAAW,MAAf,aAApB,oEACA,kBAAIA,WAAW,MAAK,kBAAIA,WAAW,MAAf,QAApB,4DAAkH,0BAAYA,WAAW,MAAvB,SAAlH,iBACA,kBAAIA,WAAW,MAAK,kBAAIA,WAAW,MAAf,aAApB,sDACA,kBAAIA,WAAW,MAAK,kBAAIA,WAAW,MAAf,aAApB,0EACA,kBAAIA,WAAW,MAAK,kBAAIA,WAAW,MAAf,cAApB,mDACA,kBAAIA,WAAW,MAAK,kBAAIA,WAAW,MAAf,QAApB,wDAEF,iMAC4E,0BAAYA,WAAW,KAAvB,eAD5E,sFAEwC,0BAAYA,WAAW,KAAvB,SAFxC,oFAE8K,6BAAGA,WAAW,KAAQ,CAChM,KAAQ,6CADkK,yBAF9K,KAKA,qMACA,0DACA,iQAEwC,6BAAGA,WAAW,KAAQ,CAC1D,KAAQ,mDAD4B,iBAFxC,mLAMA,+FAA8E,6BAAGA,WAAW,KAAQ,CAChG,KAAQ,8DADkE,oCAA9E,8EAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,2GAKL,oDACA,mGAAkF,6BAAGA,WAAW,KAAQ,CACpG,KAAQ,wBADsE,2BAAlF,WAGA,8EAA6D,0BAAYA,WAAW,KAAvB,+BAA7D,wFACA,YAACV,EAAD,CAAoBS,QAAQ,sBAC1B,mGAAkF,0BAAYC,WAAW,KAAvB,8BAAlF,aAEF,4CACA,oPACgH,0BAAYA,WAAW,KAAvB,uBADhH,UAEA,0IAAyH,sBAAQA,WAAW,KAAnB,SAAzH,0BACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,4HAIL,mDACA,6IAA4H,6BAAGA,WAAW,KAAQ,CAC9I,KAAQ,uCADgH,eAA5H,KAGA,4IACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,4NAWL,0GAAyF,0BAAYA,WAAW,KAAvB,aAAzF,QAAuJ,0BAAYA,WAAW,KAAvB,iBAAvJ,2BACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,qEAOL,6HAA4G,0BAAYA,WAAW,KAAvB,eAA5G,sCAA0M,0BAAYA,WAAW,KAAvB,aAA1M,6BAA6R,6BAAGA,WAAW,KAAQ,CAC/S,KAAQ,+BADiR,iCAA7R,KAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,oTAcL,oHACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,mBADZ,mHAaTH,EAAWI,gBAAiB","file":"component---src-pages-deployment-hc-preparation-mdx-96e8c45b1a763d17470f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/travis/build/IBM/spm-kubernetes/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineNotification = makeShortcode(\"InlineNotification\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p><strong parentName=\"p\">{`Note:`}</strong>{` As of Release 20.7.0, the Helm version used to verify this runbook is 3.2. All the Helm commands that are used in this runbook are based on Helm v3.`}</p>\n    </InlineNotification>\n    <p>{`The `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/IBM/spm-kubernetes\"\n      }}>{`spm-kubernetes`}</a>{` repository provides nine Helm charts:`}</p>\n    <ul>\n      <li parentName=\"ul\"><em parentName=\"li\">{`apps:`}</em>{` defines how to deploy the IBM® WebSphere® Liberty images with the SPM application.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`batch:`}</em>{` defines the batch image configuration.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`uawebapp:`}</em>{` defines how to deploy the Universal Access (React) application.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`web:`}</em>{` defines how to deploy the static content image for SPM (`}<inlineCode parentName=\"li\">{`Curam`}</inlineCode>{` image only).`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`mqserver:`}</em>{` defines the IBM WebSphere MQ image configuration.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`openldap:`}</em>{` defines the OpenLDAP image configuration (used for session failover).`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`xmlserver:`}</em>{` defines the xmlserver container configuration.`}</li>\n      <li parentName=\"ul\"><em parentName=\"li\">{`spm:`}</em>{` an umbrella chart to contain all the other charts.`}</li>\n    </ul>\n    <p>{`The charts use a templating mechanism to create the YAML file that is used by Kubernetes.\nFor this reason, the main configuration values are stored for each chart in a `}<inlineCode parentName=\"p\">{`values.yaml`}</inlineCode>{` file in the main folder of the charts.\nThe values can also be overwritten by the `}<inlineCode parentName=\"p\">{`spm:*`}</inlineCode>{` umbrella chart or by a provided override file during deployment as described in `}<a parentName=\"p\" {...{\n        \"href\": \"/spm-kubernetes/deployment/hc_deployment\"\n      }}>{`Deploying Helm charts`}</a>{`.`}</p>\n    <p>{`YAML is a human-readable structured data format. It provides powerful configuration settings, without having to learn a more complex code type like CSS, JavaScript, or PHP.`}</p>\n    <h2>{`Preparing to run the Helm charts`}</h2>\n    <p>{`Before you run the charts, you must configure the database, configure IBM MQ, and test the charts.\nYou may also optionally integrate your deployment with an ISAM server for SSO enablement,\nto do so please complete the steps on the `}<a parentName=\"p\" {...{\n        \"href\": \"/spm-kubernetes/supporting-infrastructure/ISAM\"\n      }}>{`Enabling ISAM`}</a>{` page under Supporting Infrastructure before returning here.\nBefore you run the charts, you must configure the database, configure IBM MQ, and resolve all chart dependencies.`}</p>\n    <p>{`Many of the Helm charts that make up a deployment of SPM depend on the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/IBM/charts/tree/master/samples/ibm-sch\"\n      }}>{`IBM Shared Configuration Helpers`}</a>{` chart, so an extra Helm repository must be added using the command below:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`helm repo add sch https://raw.githubusercontent.com/IBM/charts/master/repo/samples\nhelm repo update\n`}</code></pre>\n    <h3>{`Configuring the Helm chart`}</h3>\n    <p>{`An in-depth catalog of available configuration options is available in the `}<a parentName=\"p\" {...{\n        \"href\": \"../config-reference\"\n      }}>{`Configuration Reference`}</a>{` topic.`}</p>\n    <p>{`While you may change the values in your local copy of `}<inlineCode parentName=\"p\">{`helm-charts/spm/values.yaml`}</inlineCode>{`, it is strongly recommended to use a values override file with your custom options.`}</p>\n    <InlineNotification mdxType=\"InlineNotification\">\n      <p>{`Sample override files for Minikube, IKS, and CRC are also available in the `}<inlineCode parentName=\"p\">{`$SPM_HOME/static/resources`}</inlineCode>{` folder.`}</p>\n    </InlineNotification>\n    <h3>{`Configuring IBM MQ`}</h3>\n    <p>{`IBM MQ is already configured to work out of the box with a secure connection with IBM WebSphere Liberty.\nThe commands that create all the objects that are needed on the queue manager are defined in a config map, in the `}<inlineCode parentName=\"p\">{`configmap-mqsc.yaml`}</inlineCode>{` file.`}</p>\n    <p>{`The password for the IBM MQ web console can be retrieved from the created Secret resource using the command below `}<strong parentName=\"p\">{`after`}</strong>{` it has been deployed:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`kubectl get secret <releaseName>-mq-credentials -o go-template='{{.data.adminPasswordKey | base64decode}}{{\"\\\\n\"}}'\n`}</code></pre>\n    <h2>{`Packaging the Helm charts`}</h2>\n    <p>{`To use the Helm Charts to install SPM, package the charts and load them into a repository. For more information, see `}<a parentName=\"p\" {...{\n        \"href\": \"/spm-kubernetes/prereq/chartmuseum\"\n      }}>{`ChartMuseum`}</a>{`.`}</p>\n    <p>{`For each chart, its dependencies must be resolved before it can be loaded into a Helm repository like Chart museum.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`cd $SPM_HOME/helm-charts\n\nhelm dependency update apps\nhelm dependency update mqserver\nhelm dependency update xmlserver\nhelm dependency update batch\nhelm dependency update web\nhelm dependency update uawebapp\n`}</code></pre>\n    <p>{`If you made any changes to any of the charts, these can now be verified using the `}<inlineCode parentName=\"p\">{`helm lint`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`helm template`}</inlineCode>{` commands, for example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`cd $SPM_HOME/helm-charts\n\nhelm lint apps\nhelm template apps\n`}</code></pre>\n    <p>{`To publish the individual charts to the Chart museum repository, run the following commands from the `}<inlineCode parentName=\"p\">{`helm-charts`}</inlineCode>{` folder. The commands also use the `}<inlineCode parentName=\"p\">{`$SPM_HOME`}</inlineCode>{` value that is defined in `}<a parentName=\"p\" {...{\n        \"href\": \"/spm-kubernetes/prereq/git\"\n      }}>{`Install prerequisite software`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`cd $SPM_HOME/helm-charts\n\nhelm push apps local-development\nhelm push mqserver local-development\nhelm push xmlserver local-development\nhelm push batch local-development\nhelm push web local-development\nhelm push uawebapp local-development\nhelm push openldap local-development\n\nhelm repo update\n`}</code></pre>\n    <p>{`To generate the umbrella chart that is used for the deployment, run the following commands:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-shell\"\n      }}>{`cd $SPM_HOME/helm-charts\n\nhelm dependency update spm\nhelm push spm local-development\n\nhelm repo update\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}